/**
 * @fileoverview Firestore Security Rules for Paddleboarding App
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and paddle sessions,
 * while allowing public read access to paddle spot information. Write access to paddle spots
 * is currently open but should be restricted to admins in a production environment.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only by the authenticated user.
 * - /users/{userId}/paddle_sessions/{sessionId}: Stores paddle session data, owned by the user.
 * - /paddle_spots/{spotId}: Stores global paddle spot information, publicly readable.
 *
 * Key Security Decisions:
 * - User profiles are strictly private; only the authenticated user can read or write their own profile.
 * - Paddle sessions are owned by the user and stored under their profile.
 * - Paddle spot information is publicly readable to encourage community contributions, but write access should be limited to admins.
 * - Listing of users is disallowed to protect user privacy.
 *
 * Denormalization for Authorization:
 * - PaddleSession documents include a 'userId' field, allowing direct ownership validation without requiring a 'get()' operation on the user's profile.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile document.
     * @allow (get) - User with UID 'user_abc' can read their own profile document.
     * @allow (update) - User with UID 'user_abc' can update their own profile document.
     * @allow (delete) - User with UID 'user_abc' can delete their own profile document.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile document for 'user_abc'.
     * @deny (get) - User with UID 'user_xyz' cannot read the profile document of 'user_abc'.
     * @deny (update) - User with UID 'user_xyz' cannot update the profile document of 'user_abc'.
     * @deny (delete) - User with UID 'user_xyz' cannot delete the profile document of 'user_abc'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Allow the user to create their own profile.  The request must match the userId
      allow create: if isOwner(userId) && request.resource.data.email is string && request.resource.data.name is string && request.resource.data.photoURL is string;
      // Allow the user to read their own profile
      allow get: if isOwner(userId);
      // Allow the user to update their own profile. The id field must be immutable
      allow update: if isOwner(userId) && resource.data.email == request.resource.data.email && resource.data.name == request.resource.data.name  && resource.data.photoURL == request.resource.data.photoURL;
      // Allow the user to delete their own profile if it exists
      allow delete: if isOwner(userId) && resource != null;
      // Do not allow listing of all users
      allow list: if false;
    }

    /**
     * @description Controls access to paddle session documents within a user's profile.
     * @path /users/{userId}/paddle_sessions/{sessionId}
     * @allow (create) - User with UID 'user_abc' can create a session document under their profile.
     * @allow (get) - User with UID 'user_abc' can read a session document under their profile.
     * @allow (update) - User with UID 'user_abc' can update a session document under their profile.
     * @allow (delete) - User with UID 'user_abc' can delete a session document under their profile.
     * @deny (create) - User with UID 'user_xyz' cannot create a session document for 'user_abc'.
     * @deny (get) - User with UID 'user_xyz' cannot read a session document from 'user_abc'.
     * @deny (update) - User with UID 'user_xyz' cannot update a session document from 'user_abc'.
     * @deny (delete) - User with UID 'user_xyz' cannot delete a session document from 'user_abc'.
     * @principle Enforces document ownership for paddle sessions.
     */
    match /users/{userId}/paddle_sessions/{sessionId} {

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Allow the user to create a session under their profile, enforcing userId consistency.
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      // Allow the user to read a session under their profile.
      allow get: if isOwner(userId);
      // Allow the user to update a session under their profile, enforcing userId immutability.
      allow update: if isOwner(userId) && resource != null && resource.data.userId == request.resource.data.userId;
      // Allow the user to delete a session under their profile, checking for existence.
      allow delete: if isOwner(userId) && resource != null;
      // Allow the user to list sessions under their profile.
      allow list: if isOwner(userId);
    }

    /**
     * @description Controls access to paddle spot documents.
     * @path /paddle_spots/{spotId}
     * @allow (get) - Any user can read paddle spot documents.
     * @allow (list) - Any user can list paddle spot documents.
     * @allow (create) - Currently allows anyone to create a paddle spot. SHOULD BE RESTRICTED TO ADMINS.
     * @allow (update) - Currently allows anyone to update a paddle spot. SHOULD BE RESTRICTED TO ADMINS.
     * @allow (delete) - Currently allows anyone to delete a paddle spot. SHOULD BE RESTRICTED TO ADMINS.
     * @principle Allows public read access to paddle spots, but requires ADMIN-ONLY write access.
     */
    match /paddle_spots/{spotId} {
      // Allow anyone to read paddle spot information.
      allow get, list: if true;
      // Allow anyone to create, update, or delete paddle spots. SHOULD BE RESTRICTED TO ADMINS.
      allow create, update, delete: if true; // TODO: Restrict to admins.
    }
  }
}